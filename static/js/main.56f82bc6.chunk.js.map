{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","TextField","name","value","label","required","onChange","validation","useState","Math","random","toString","slice","id","touched","setToched","patternError","setPatternError","hasError","needValidation","htmlFor","classNames","type","placeholder","event","onBlur","test","NewMovie","onAdd","count","setCount","defaultValues","textFieldsValue","setTextfieldsValue","fillRequired","length","handleChange","target","trim","disableSubmit","Object","values","every","el","onSubmit","preventDefault","forEach","disabled","App","moviesFromServer","visibleMovies","setVisibleMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56f82bc6.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  validation?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\n// eslint-disable-next-line max-len\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validation = false,\n\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n\n  const [patternError, setPatternError] = useState('');\n  const hasError = touched && required && !value;\n  const needValidation = patternError !== '' && validation;\n\n  const handleBlur = () => {\n    setToched(true);\n    setPatternError(!pattern.test(value) ? 'Data is not correct' : '');\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || needValidation,\n\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {(needValidation && !hasError) && (\n        <p className=\"help is-danger\">{patternError}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField, pattern } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\ntype FillRequired = {\n  title: boolean,\n  imgUrl: boolean,\n  imdbUrl: boolean,\n  imdbId: boolean,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const defaultValues = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [textFieldsValue, setTextfieldsValue] = useState(defaultValues);\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = textFieldsValue;\n\n  const fillRequired: FillRequired = {\n    title: !!title.length,\n    imgUrl: !!(pattern.test(imgUrl)),\n    imdbUrl: !!(pattern.test(imdbUrl)),\n    imdbId: !!imdbId.length,\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setTextfieldsValue(\n      { ...textFieldsValue, [name]: value.trim().length > 0 ? value : '' },\n    );\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    setTextfieldsValue(defaultValues);\n    Object.values(fillRequired).forEach(el => !el);\n    setCount(count + 1);\n  };\n\n  const disableSubmit = !Object.values(fillRequired).every(el => el === true);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleChange}\n        required\n        validation\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleChange}\n        required\n        validation\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={disableSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [visibleMovies, setVisibleMovie] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setVisibleMovie([...visibleMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}